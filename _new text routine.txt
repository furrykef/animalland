The idea here is we first copy the text into a buffer, inserting newlines and the "wait for key" code at appropriate places as we do so. Then our old text routine is used to print the text inside this buffer. The "pseudocursor" is a copy of the VRAM cursor (since we don't adjust the real VRAM cursor except when drawing to the screen).


Algorithm
---------
Try to copy a word to the buffer, updating the pseudocursor as we go. If we overflow the right margin, back up to the start of the word, print a newline, and try again. Anytime we put out a newline, check if we've overflowed the textbox. If so, put <key> at the start of the buffer, set the pseudocursor to the upper left, and start over. If the buffer already starts with <key> when we go to put one there, we are in an infinite loop and we should print an error message. Stop if we reach the end of an utterance, otherwise, jump back to the beginning of this routine.

CopyWord leaves the text pointer at the start of the next space or other word boundary character. If it is a space, it will copy this space the next time it's called unless the cursor is at the left margin; in that case, the space is skipped.


P-code
------
FormatText:
        start_txtptr = txtptr
        start_bufptr = &buffer[0]
        bufptr = start_bufptr
Word:
        old_txtptr = txtptr
        old_bufptr = bufptr
        call CopyWord
        if cur_x > BOX_WIDTH:
            txtptr = old_txtptr
            bufptr = old_bufptr
            call NL
            jmp Word
        if *txtptr == '<end>':
            *bufptr = *txtptr
            return
        if *txtptr == '<nl>':
            txtptr++
            call NL
            jmp KeyOrNL
        if *txtptr == '<key>':
            cur_x = 0
            cur_y = 0
            *bufptr++ = *txtptr++
            jmp KeyOrNL
        if (*txtptr == ' ' and *(txtptr-1) in "?!.,:;)]”"):
KeyOrNL:    start_txtptr = txtptr
            start_bufptr = bufptr
        jmp Word


CopyWord:
        if *txtptr == ' ':
            if cur_x > 0:
                cur_x += width of *bufptr
                *bufptr = *txtptr++
            bufptr++
        while *txtptr not in [' ', '<nl>', '<key>', '<end>']:
            cur_x += width of *bufptr
            *bufptr++ = *txtptr++


NL:
        *bufptr++ = '<nl>'
        cur_x = 0
        cur_y++
        if cur_y > MAX_CUR_Y:
            # Check for infinite loop
            if *start_bufptr == '<key>':
                call PrintError
            # Naw, we're good
            bufptr = start_bufptr
            *bufptr++ = '<key>'
            cur_x = 0
            cur_y = 0
            txtptr = start_txtptr
        jmp Word
