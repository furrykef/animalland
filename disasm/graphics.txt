$7346:  ld      a, 6                        ; ID of ALPD graphic
$7348:  call    $4021                       ; jumps to $403c
        call    $4033                       ; jumps to $4260


$403c:  call    $4042
        jp      $40ba


; Load graphic (does not load tilemap)
;
; Inputs:
;   A: number of image to display
;   $f2ee: address of first image in group
$4042:  push    af
        ld      a, ($f2ed)
        ld      ($7000), a                  ; switch bank
        ld      ($f2da), a
        inc     a
        ld      ($7800), a
        pop     af
        ld      hl, ($f2ee)
        or      a
        jr      z, $4076                    ; skip the loop for image #0

        ; This loop just skips over N images, where N is the value that was passed in A
        ld      b, a
$4058:  ld      e, (hl)                     ; get size of compressed image
        inc     hl
        ld      d, (hl)
        dec     hl
        add     hl, de
        ld      a, h
        cp      $a0                         ; if HL < $A000...
        jr      c, $4074                    ; ...we've not crossed a bank boundary; jump to top of loop
        ld      a, ($f2da)                  ; else, we have crossed one
        inc     a                           ; so we must update the banks
        ld      ($7000), a
        ld      ($f2da), a
        inc     a
        ld      ($7800), a
        ld      de, $e000
        add     hl, de
$4074:  djnz    $4058

$4076:  ex      de, hl
        inc     de                          ; skip past the size
        inc     de
        ld      a, (de)                     ; get the VRAM address to write to, divided by 8
        inc     de
        push    de
        call    $4146                       ; HL := A*8, putting a proper VRAM address in HL
        call    $0053                       ; SETWRT
        pop     de
        call    $4150                       ; decompress to VRAM
        ld      a, (de)                     ; get a second VRAM/8 address
        inc     de
        push    de
        call    $4146                       ; HL := A*8
        ld      de, $0800
        add     hl, de
        call    $0053                       ; SETWRT
        pop     de
        call    $4150                       ; decompress to VRAM

        ; *** SNIP ***
        ; This rigamarole is done two more times,
        ; only HL has $2000 and $2800 added instead of $0800

        ret


; HL := A*8
$4146:
        ld      h, 0
        ld      l, a
        ld      de, 8
        call    $3193                       ; HL *= DE (IMULT)
        ret


; Decompress graphic to VRAM
;
; Inputs:
;    DE: address to copy from
$4150:  ld      a, ($0007)                  ; get VDP.DW
        ld      c, a
$4154:  ld      a, (de)
        inc     de
        or      a                           ; is the value 00?
        ret     z                           ; we're done if so
        ld      b, a
        bit     7, b                        ; if bit 7 is set...
        jr      nz, $4165                   ; ...then we copy N bytes

        ; Bit 7 is clear; copy byte N times
        ld      a, (de)
        inc     de
$415f:  out     (c), a                      ; write to VRAM
        djnz    $415f
        jr      $4154                       ; back to top of decoder loop

        ; Bit 7 was set; copy N bytes
$4165:  res     7, b                        ; clear high bit of loop count
$4167:  ld      a, (de)
        inc     de
        out     (c), a
        djnz    $4167
        jr      $4154                       ; back to top of decoder loop


$4199:
        call    $4042
        push    de
        ld      a, ($f2e8)
        ld      l, a
        ld      de, $0020
        call    $3193                       ; HL *= DE (IMULT)
        ld      de, $1802
        add     hl, de
        ld      a, ($f2e9)
        add     a, l
        ld      l, a
        pop     de
        ld      a, ($0007)
        ld      c, a
        ld      a, ($f2e6)
        ld      b, a
$41bb:  push    bc
        call    $0053                       ; SETWRT
        ld      a, ($f2e7)
        ld      b, a
$41c3:  ld      a, (de)
        out     (c), a
        inc     de
        djnz    $41c3
        ld      bc, $0020
        add     hl, bc
        pop     bc
        djnz    $41bb
        jp      $4253


$4260:  ld      a, 1
        ld      ($f2e8), a
        ld      hl, $130e
        ld      ($f2e6), hl
        ld      a, ($f2d9)
        call    $4199
        ret
